import java.io.*;
import java.util.*;

public class CodeForces {
    static long max = 0;
    static int n1 = 0, n2 = 0;
    static char op1 = ' ', op2 = ' ', op3 = ' ', op4 = ' ';


    static class FastReader {
        BufferedReader br;
        StringTokenizer st;

        public FastReader() {
            br = new BufferedReader(new
                    InputStreamReader(System.in));
        }

        String next() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        double nextDouble() {
            return Double.parseDouble(next());
        }

        String nextLine() {
            String str = "";
            try {
                str = br.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }
    }


    public static void main(String[] args) {

        FastReader sc = new FastReader();

        int n = sc.nextInt();
        int a[] = new int[n];
        int l = sc.nextInt();
        int zero = 0, one = 0;
        for (int i = 0; i < n; i++) {
            int k = sc.nextInt();
            a[i] = k;
            if (k == 0) zero++;
            else one++;
        }
        int v[][] = new int[n][n];
        for (int i = 0; i < n; i++)
            Arrays.fill(v[i], -1);
        int max = find(0, n - 1, l, one, zero, n, a, v);
        System.out.println(max);


    }

    private static int find(int i, int j, int k, int o, int z, int n, int[] a, int[][] v) {


        if (i > j)
            return 0;
        if (v[i][j] != -1)
            return v[i][j];
        if (o + k == (j - i) + 1)
            return (j - i) + 1;

        int ai = a[i];
        int aj = a[j];
        int sum = Math.max(find(i + 1, j, k, (ai == 1) ? o - 1 : o, (ai == 0) ? z - 1 : z, n, a, v), find(i, j - 1, k, (aj == 1) ? o - 1 : o, (aj == 0) ? z - 1 : z, n, a, v));
        v[i][j] = sum;
        return sum;

    }


}
