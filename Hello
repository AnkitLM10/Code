import java.io.*;
import java.util.*;

public class CodeForces {
    static int max = 0;
    static int ii = -1;
    static int jj = -1;
    static int n1 = 0, n2 = 0;
    static char op1 = ' ', op2 = ' ', op3 = ' ', op4 = ' ';


    static class FastReader {
        BufferedReader br;
        StringTokenizer st;

        public FastReader() {
            br = new BufferedReader(new
                    InputStreamReader(System.in));
        }

        String next() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        double nextDouble() {
            return Double.parseDouble(next());
        }

        String nextLine() {
            String str = "";
            try {
                str = br.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }
    }


    public static void main(String[] args) {

        FastReader sc = new FastReader();
int ans=0;
        int t = sc.nextInt();
        for (int u = 0; u < t; u++) {
          ans=0;
                 int n=sc.nextInt();
                 HashMap<Integer,Integer> map=new HashMap<>();
                 for(int j=0;j<n;j++)
                 {
                     int k=sc.nextInt();
                     int l=(int)Math.sqrt(k);
                if(map.containsKey(k) && map.get(k)>ans)
                {
//                    System.out.println(k+"  "+map.get(k));
//                    System.out.println(map.get(2));
                    ans = map.get(k);
                }

                     for(int i=1;i<=l;i++)
                     {
                         if(k%i==0)
                         {
                             if(!map.containsKey(i))
                                 map.put(i,0);
                               if(!map.containsKey(k/i))
                                 map.put(k/i,0);

                             if(k/i==i)
                             {
                                 map.put(i,map.get(i)+1);
                             }
                             else
                             {
                                 map.put(i,map.get(i)+1);
                                 map.put(k/i,map.get(k/i)+1);

                             }



                         }


                     }
                  //   System.out.println(map);

                 }

            System.out.println(ans);
        }


    }

}
