import java.io.*;
import java.util.*;

public class CodeForces {
    static int max = 0;
    static int ii = -1;
    static int jj = -1;
    static int n1 = 0, n2 = 0;
    static char op1 = ' ', op2 = ' ', op3 = ' ', op4 = ' ';


    static class FastReader {
        BufferedReader br;
        StringTokenizer st;

        public FastReader() {
            br = new BufferedReader(new
                    InputStreamReader(System.in));
        }

        String next() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        double nextDouble() {
            return Double.parseDouble(next());
        }

        String nextLine() {
            String str = "";
            try {
                str = br.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }
    }


    public static void main(String[] args) {

        FastReader sc = new FastReader();

        int n = sc.nextInt();

        int h = (int) (Math.ceil(Math.log(n) / Math.log(2))) + 1;
        int a[] = new int[n];
        for (int i = 0; i < n; i++)
            a[i] = sc.nextInt();
        int size = (int) Math.pow(2, h);
        int v[] = new int[size];
      //  System.out.println(size);
           Arrays.fill(v,Integer.MAX_VALUE);
        fill(0, n - 1, 0, a, v);


        int q=sc.nextInt();
        for(int i=0;i<q;i++)
        {
            int l=sc.nextInt();
            int r=sc.nextInt();
            System.out.println(find(0,n-1,l,r,a,v,0));



        }










    }

    private static int find(int i, int j, int l, int r, int[] a, int[] v, int level) {

        if(r<i || j<l)
            return Integer.MAX_VALUE;

        if( (i==l && j==r) || i==j )
            return v[level];

    int mid=(i+j)/2;
    return Math.min(find(i,mid,l,r,a,v,level*2+1),find(mid+1,j,l,r,a,v,level*2+2));

















    }

    private static void fill(int i, int j, int l, int[] a, int[] v) {

        if (i == j) {
          //  System.out.println(a[i]);
            v[l] = a[i];
            return;
        }


        int mid = (i + j) / 2;
        fill(i, mid, 2 * l + 1, a, v);
        fill(mid + 1, j, 2 * l + 2, a, v);
        v[l] =Math.min( v[l * 2 + 1] , v[l * 2 + 2]);


    }
}
